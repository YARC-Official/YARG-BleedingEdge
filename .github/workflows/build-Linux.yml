name: ðŸ”¨ Build - Linux

on:
  workflow_dispatch:
  workflow_call:

env:
  platform: "Linux"

  unityVersion: "2021.3.21f1"
  unityVersionHash: "1b156197d683"
  blenderMajorVersion: "3.4"
  blenderVersion: "3.4.1"

  repositoryAuthor: "YARC-Official"
  repositoryName: "YARG"
  branch: "dev"

permissions:
  contents: write

jobs:
  check:
    uses: ./.github/workflows/check-release.yml
    with: 
      platform: "Linux"
      repositoryAuthor: "YARC-Official"
      repositoryName: "YARG"
      repositoryBranch: "dev"

  linuxBuilder:
    needs: [check]
    if: needs.check.outputs.runBuild == 'true'

    name: ðŸ”¨ Build - Linux
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:

      #############################
      #       Install Unity       #
      #############################

      - name: "[Install] Install dependencies"
        run: |
          sudo apt-get -q update &&
          sudo apt-get -q install -y --no-install-recommends apt-utils &&
          sudo apt-get -q install -y --no-install-recommends --allow-downgrades ca-certificates libasound2 libc6-dev libcap2 libgconf-2-4 libglu1 libgtk-3-0 libncurses5 libnotify4 libnss3 libxtst6 libxss1 cpio lsb-release xvfb xz-utils && 
          sudo apt-get clean && 
          sudo rm -rf /var/lib/apt/lists/* &&
          sudo apt-get -q update &&
          sudo apt-get -q install -y --no-install-recommends software-properties-common &&
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test &&
          sudo apt-get -q install -y --only-upgrade libstdc++6 &&
          sudo add-apt-repository -y --remove ppa:ubuntu-toolchain-r/test &&
          sudo apt-get -q remove -y --auto-remove software-properties-common &&
          sudo apt-get clean &&
          sudo rm -rf /var/lib/apt/lists/*

      - name: "[Install] Download Unity Editor + Linux IL2CPP builder"
        run: |
          mkdir ${{ runner.temp }}/UnityInstall &&
          curl -L -o "${{ runner.temp }}/UnityInstall/UnitySetup-Editor.tar.xz" https://download.unity3d.com/download_unity/${{ env.unityVersionHash }}/LinuxEditorInstaller/Unity-${{ env.unityVersion }}.tar.xz &&
          curl -L -o "${{ runner.temp }}/UnityInstall/UnitySetup-Linux-IL2CPP-Support.tar.xz" https://download.unity3d.com/download_unity/${{ env.unityVersionHash }}/LinuxEditorTargetInstaller/UnitySetup-Linux-IL2CPP-Support-for-Editor-${{ env.unityVersion }}.tar.xz

      - name: "[Install] Install Unity Editor + Linux IL2CPP builder"
        run: |
          mkdir "${{ runner.temp }}/Unity" &&
          tar -xvf "${{ runner.temp }}/UnityInstall/UnitySetup-Editor.tar.xz" -C "${{ runner.temp }}/Unity" &&
          tar -xvf "${{ runner.temp }}/UnityInstall/UnitySetup-Linux-IL2CPP-Support.tar.xz" -C "${{ runner.temp }}/Unity" &&
          rm -rf "${{ runner.temp }}/UnityInstall"


      #############################
      #          Checkout         #
      #############################

      - name: "[Pre-install] Pull project"
        uses: nschloe/action-cached-lfs-checkout@v1.2.1
        with:
          repository: ${{ env.repositoryAuthor }}/${{ env.repositoryName }}
          ref: ${{ env.branch }}
          submodules: recursive

      - name: "[Pre-install] Pull latest submodules"
        run: git submodule update

      - name: "[Pre-install] Pull bleeding-edge repository"
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          path: bleedingedge


      #############################
      #           Cache           #
      #############################

      - name: "[Pre-install] Restore 'library' cache"
        uses: actions/cache@v3
        with:
          path: Library
          key: ${{ env.platform }}-YARG_Library


      #############################
      #      Install Blender      #
      #############################

      - name: "[Pre-install] Get Blender (${{ env.blenderVersion }}) from cache"
        id: blender
        uses: actions/cache@v3
        with: 
          path: ${{ runner.temp }}/BlenderInstall
          key: Linux_Blender-${{ env.blenderVersion }}
          restore-keys: Linux_Blender-

      - if: ${{ steps.blender.outputs.cache-hit != 'true' }}
        name: "[Pre-install] Download Blender (${{ env.blenderVersion }})"
        continue-on-error: true
        run: mkdir ${{ runner.temp }}/BlenderInstall && curl -L -o "${{ runner.temp }}/BlenderInstall/blender.tar.xz" https://download.blender.org/release/Blender${{ env.blenderMajorVersion }}/blender-${{ env.blenderVersion }}-linux-x64.tar.xz

      - name: "[Pre-install] Install Blender (${{ env.blenderVersion }})"
        run: >
          sudo tar xvf "${{ runner.temp }}/BlenderInstall/blender.tar.xz" -C /opt/ &&
          sudo mv /opt/blender*/ /opt/blender &&
          sudo ln -sf /opt/blender/blender /usr/bin/blender


      #############################
      #     Restore  Packages     #
      #############################

      - name: "[Pre-install] Install dotnet 7.x"
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: "[Pre-install] Restoring NuGet Packages"
        run: dotnet tool install --global NuGetForUnity.Cli && nugetforunity restore


      #############################
      # Replace icon with nightly #
      #############################

      - name: "[Pre-build] Replace icon with Nightly/Development"
        run: "cp -f bleedingedge/static/Icon_Development.png Assets/Art/UI/Icon_Stable.png"


      #############################
      #      Build YARG.Core      #
      #############################

      - name: "[Pre-build] Build YARG.Core"
        run: >
          mkdir Assets/Plugins/YARG.Core &&
          dotnet build YARG.Core/YARG.Core/YARG.Core.csproj /property:GenerateFullPaths=true /consoleloggerparameters:NoSummary --output Assets/Plugins/YARG.Core


      #############################
      #           Build           #
      #############################

      - name: "[Build] Run Builder"
        run: |
          ${{ runner.temp }}/Unity/Editor/Unity -quit -batchmode -nographics -projectPath ${{ github.workspace }} -buildTarget StandaloneLinux64 -buildLinux64Player ${{ github.workspace }}/build/YARG -username ${{ secrets.LINUX_UNITY_EMAIL || secrets.UNITY_EMAIL }} -password ${{ secrets.LINUX_UNITY_PASSWORD || secrets.UNITY_PASSWORD }} -serial ${{ secrets.LINUX_UNITY_SERIAL || secrets.UNITY_SERIAL }} -logfile -

      - name: "[Post-build] Remove YARG_BurstDebugInformation_DoNotShip"
        run: (cd build && rm -rf YARG_BurstDebugInformation_DoNotShip)


      #############################
      #         Compress          #
      #############################
      - name: "[Post-build] Compress to a .zip"
        run: mkdir Release && (cd build && zip -r ../Release/YARG_${{ needs.check.outputs.latestSHA }}-Linux-x64.zip .)


      #############################
      #          Upload           #
      #############################
      - name: "[Post-build] Upload to releases"
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: Nightly Build - ${{ needs.check.outputs.latestSHA }}
          tag: ${{ needs.check.outputs.tagName }}
          file: Release/*
          file_glob: true
          body: ${{ needs.check.outputs.messageBody }}