name: ðŸ”¨ Build - Mac

on:
  workflow_dispatch:
  workflow_call:

env:
  platform: "MacOS"

  unityVersion: "2021.3.21f1"
  unityVersionHash: "1b156197d683"
  blenderMajorVersion: "3.4"
  blenderVersion: "3.4.1"

  repositoryAuthor: "YARC-Official"
  repositoryName: "YARG"
  branch: "dev"

permissions:
  contents: write

jobs:
  check:
    uses: ./.github/workflows/check-release.yml
    with: 
      platform: "MacOS"
      repositoryAuthor: "YARC-Official"
      repositoryName: "YARG"
      repositoryBranch: "dev"

  macBuilder:
    needs: [check]
    if: needs.check.outputs.runBuild == 'true'

    name: ðŸ”¨ Build - MacOS
    runs-on: macos-latest
    timeout-minutes: 90

    steps:

      #############################
      #          Checkout         #
      #############################

      - name: "[Pre-install] Pull project"
        uses: nschloe/action-cached-lfs-checkout@v1.2.1
        with:
          repository: ${{ env.repositoryAuthor }}/${{ env.repositoryName }}
          ref: ${{ env.branch }}
          submodules: recursive

      - name: "[Pre-install] Pull latest submodules"
        run: git submodule update

      - name: "[Pre-install] Pull bleeding-edge repository"
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          path: bleedingedge


      #############################
      #           Cache           #
      #############################

      - name: "[Pre-install] Restore 'library' cache"
        uses: actions/cache@v3
        with:
          path: Library
          key: ${{ env.platform }}-YARG_Library


      #############################
      #      Install Blender      #
      #############################

      - name: "[Pre-install] Get Blender (${{ env.blenderVersion }}) from cache"
        id: blender
        uses: actions/cache@v3
        with: 
          path: ${{ runner.temp }}/BlenderInstall
          key: Mac_Blender-${{ env.blenderVersion }}
          restore-keys: Mac_Blender-

      - if: ${{ steps.blender.outputs.cache-hit != 'true' }}
        name: "[Pre-install] Download Blender (${{ env.blenderVersion }})"
        continue-on-error: true
        run: mkdir ${{ runner.temp }}/BlenderInstall && curl -L -o "${{ runner.temp }}/BlenderInstall/blender.dmg" https://download.blender.org/release/Blender${{ env.blenderMajorVersion }}/blender-${{ env.blenderVersion }}-macos-x64.dmg

      - name: "[Pre-install] Install Blender (${{ env.blenderVersion }})"
        run: >
          hdiutil attach ${{ runner.temp }}/BlenderInstall/blender.dmg && 
          cp -R /Volumes/Blender/Blender.app /Applications && 
          hdiutil unmount /Volumes/Blender
        

      #############################
      #     Restore  Packages     #
      #############################

      - name: "[Pre-install] Restoring NuGet Packages"
        run: dotnet tool install --global NuGetForUnity.Cli && nugetforunity restore


      #############################
      # Replace icon with nightly #
      #############################

      - name: "[Pre-build] Replace icon with Nightly/Development"
        run: "cp -f bleedingedge/static/Icon_Development.png Assets/Art/UI/Icon_Stable.png"


      #############################
      #      Build YARG.Core      #
      #############################

      - name: "[Pre-build] Build YARG.Core"
        run: >
          mkdir Assets/Plugins/YARG.Core &&
          dotnet build YARG.Core/YARG.Core/YARG.Core.csproj /property:GenerateFullPaths=true /consoleloggerparameters:NoSummary --output Assets/Plugins/YARG.Core


      #############################
      #           Build           #
      #############################

      - name: "[Install] Download Unity Editor + Mac IL2CPP builder"
        run: |
          mkdir ${{ runner.temp }}/UnityInstall &&
          curl -L -o "${{ runner.temp }}/UnityInstall/UnitySetup-Editor.pkg" https://download.unity3d.com/download_unity/${{ env.unityVersionHash }}/MacEditorInstaller/Unity-${{ env.unityVersion }}.pkg &&
          curl -L -o "${{ runner.temp }}/UnityInstall/UnitySetup-Mac-IL2CPP-Support.pkg" https://download.unity3d.com/download_unity/${{ env.unityVersionHash }}/MacEditorTargetInstaller/UnitySetup-Mac-IL2CPP-Support-for-Editor-${{ env.unityVersion }}.pkg        

      - name: "[Install] Install Unity Editor + Mac IL2CPP builder"
        run: |
          sudo installer -pkg "${{ runner.temp }}/UnityInstall/UnitySetup-Editor.pkg" -target "/" -verbose &&
          sudo installer -pkg "${{ runner.temp }}/UnityInstall/UnitySetup-Mac-IL2CPP-Support.pkg" -target "/" -verbose &&
          rm -rf "${{ runner.temp }}/UnityInstall"

      - name: "[Build] Run Builder"
        run: |
          /Applications/Unity/Unity.app/Contents/MacOS/Unity -quit -batchmode -nographics -projectPath ${{ github.workspace }} -buildTarget StandaloneOSX -buildOSXUniversalPlayer ${{ github.workspace }}/build/YARG.app -username ${{ secrets.MAC_UNITY_EMAIL || secrets.UNITY_EMAIL }} -password ${{ secrets.MAC_UNITY_PASSWORD || secrets.UNITY_PASSWORD }} -serial ${{ secrets.MAC_UNITY_SERIAL || secrets.UNITY_SERIAL }} -logfile -


      #############################
      #         Compress          #
      #############################

      - name: "[Post-build] Compress to a .zip"
        run: ditto -c -k --keepParent build/YARG.app Release/YARG_${{ needs.check.outputs.latestSHA }}-MacOS-Universal.zip
        

      #############################
      #          Upload           #
      #############################

      - name: "[Post-build] Upload to releases"
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: Nightly Build - ${{ needs.check.outputs.latestSHA }}
          tag: ${{ needs.check.outputs.tagName }}
          file: Release/*
          file_glob: true
          body: ${{ needs.check.outputs.messageBody }}